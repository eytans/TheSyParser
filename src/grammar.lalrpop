use std::str::FromStr;
use lalrpop_util::ParseError;
use std::collections::{HashMap, HashSet};
use itertools::Itertools;

use crate::ast::*;
use crate::ast::StatementOp::*;
use crate::ast::Rewrite::*;
use crate::ast::Statement::*;
use crate::ast::Expression::*;
use crate::ast::Terminal::*;
use crate::ast::Annotation::*;
use crate::ast::Definitions;

grammar;

extern {
    type Error = String;
}

pub Defs: Definitions = {
    <stmts: (<Stmt>)*> => {
        Definitions::Defs(stmts.into_iter().filter_map(|x| x).collect_vec())
    }
}

pub StmtOp: StatementOp = {
    "=>" => DirectionalRewrite,
    "<=>" => BidirectionalRewrite,
    "=|>" => DiffApply,
};

pub RW: Rewrite = {
    <precondition: ("if" <Exp> "then")?> <source: Exp> <op: StmtOp> <destination: Exp> <conditions: (Conditions)?> =>? {
        // Assert each hole is always a hole
        let mut holes: HashSet<&String> = source.terminals().iter().filter(|t| t.is_hole()).map(|t| t.ident()).collect();
        holes.extend(destination.terminals().iter().filter(|t| t.is_hole()).map(|t| t.ident()));
        if let Some(p) = precondition.as_ref() {
            holes.extend(p.terminals().iter().filter(|t| t.is_hole()).map(|t| t.ident()));
        }
        let mut ids: HashSet<&String> = source.terminals().iter().filter(|t| t.is_id()).map(|t| t.ident()).collect();
                ids.extend(destination.terminals().iter().filter(|t| t.is_id()).map(|t| t.ident()));
                if let Some(p) = precondition.as_ref() {
                    ids.extend(p.terminals().iter().filter(|t| t.is_id()).map(|t| t.ident()));
                }
        for id in ids {
            if holes.contains(id) {
                return Err(ParseError::User { error: format!("Identifier {:?} is used both as a hole and as a normal id", id)});
            }
        }

        let conds = conditions.unwrap_or(vec![]);
        Ok(match op {
           DirectionalRewrite => DRewrite(precondition, source, destination, conds),
           BidirectionalRewrite => BRewrite(precondition, source, destination, conds),
           DiffApply => AddSearcher(precondition, source, destination, conds),
          })
    }
}

pub Stmt: Option<Statement> = {
    "rw" <name: Id> <rewrite: RW> => Some(RewriteDef(name, rewrite)),
    "fun" <name: Id> <params: (Param)*> "->" <ret: Annot> <body: ("=>" <Exp>)?> =>? {
        for tup in &params {
           let (param, anno) = tup;
           if !anno.has_type() {
                return Err(ParseError::User { error: "No annotation on param".to_string()});
           }
        }
        if let Some(e) = &body {
            if let Some(t) = e.terminals().iter().find(|t| t.is_id() &&
            params.iter().any(|p| &p.0 == t.ident())) {
                return Err(ParseError::User { error: format!("terminal {:?} is a param therefore has to be a hole in function def", t)});
            }
        }
        Ok(Some(Function(name, params, ret, body)))
    },
    // Name - Type params - Constructors
    // String, Vec<Identifier>, Vec<Constructor>
    "datatype" <name: Id> "(" <type_params: (<Id> <(<Id>)*>)?> ")" ":=" <constrs: ("(" <Constr> ")" )+> => {
        if let Some((h, t)) = type_params {
            let mut tps = vec![h];
            tps.extend(t);
            Some(Datatype(name, tps, constrs))
        } else {
            Some(Datatype(name, vec![], constrs))
        }
    },
    "split" <expr: Exp> "in" <searcher: Exp> "to" <patterns: (<Exp>)+> <conditions: (<Conditions>)?> =>? {

        let expr_holes = expr.holes();
        let searcher_holes = searcher.holes();
        if expr_holes.is_empty() {
            return Err(ParseError::User{error: format!("No holes in splitter expr {}", expr)});
        }
        if !expr_holes.into_iter().collect::<HashSet<&Terminal>>()
               .is_subset(&searcher_holes.into_iter().collect::<HashSet<&Terminal>>()) {
            return Err(ParseError::User{error: format!("Invalid holes in splitter {}", expr)});
        }
        let mut holes: HashMap<bool, HashSet<&String>> = HashMap::default();
        holes.insert(false, HashSet::default());
        holes.insert(true, HashSet::default());
        for t in searcher.terminals().into_iter().chain(expr.terminals().into_iter()) {
            holes.get_mut(&t.is_hole()).unwrap().insert(t.ident());
            if holes.get(&!t.is_hole()).unwrap().contains(t.ident()) {
                return Err(ParseError::User{error: format!("Must repeatedly specify holes as such: {}", t.ident())});
            }
        }
        for p in &patterns {
            for t in p.terminals() {
                holes.get_mut(&t.is_hole()).unwrap().insert(t.ident());
                if holes.get(&!t.is_hole()).unwrap().contains(t.ident()) {
                    return Err(ParseError::User{error: format!("Must repeatedly specify holes as such: {}", t.ident())});
                }
            }
        }
        Ok(Some(CaseSplit(searcher, expr, patterns, conditions.unwrap_or(vec![]))))
    },
    "prove" <precondition: ("if" <Exp> "then")?> <exp1: Exp> <exp2: ("=" <Exp>)?> =>? {
        let mut holes = exp1.terminals();
        if let Some(p) = precondition.as_ref() {
            holes.extend(p.terminals().iter());
        }
        if let Some(e) = exp2.as_ref() {
            holes.extend(e.terminals().iter());
        }
        let hole = holes.iter().find(|t| t.is_hole());
        if let Some(h) = hole {
            // This assumption is used in goal processing
            return Err(ParseError::User {error: format!("Holes are not allowed in proof goals: {}", h.ident())});
        }
        Ok(Some(Goal(precondition,
            exp1,
            exp2.unwrap_or(Leaf(Id("true".to_string(),
                                    Some(Box::new(Type(Leaf(Id("bool".to_string(), None))))))))
                                    )))
    },
    r";(.*)+| \n" => None,
};

pub Constr: Constructor = {
    // (Identifier, Vec<Parameter>)
    <name: Id> <params: (":" <Param> <("->" <Param>)*>)?> => {
        let mut res_params = vec![];
        if let Some((h, t)) = params {
            res_params.push(h);
            res_params.extend(t);
        };
        (name, res_params)
    },
};

pub Param: Parameter = {
    <name: Id> ":" <anno: Annot> => (name, anno),
    "(" <Param> ")",
};

pub Annot: Annotation = {
    <Exp> => Type(<>),
    "ph(" <n: Num> ")" => {
         debug_assert!(n >= 0);
         Placeholder(n as usize)
     },
    "{" <head: Annot> <mut tail: ("," <Annot>)*> (",")? "}" => {
        tail.push(head);
        MultiAnnot(tail)
    },
}

pub Conditions: Vec<(Terminal, Expression)> = {
    "when" <head: ("(" <Termi> "!=" <Exp> ")")> <mut tail: ("and" "(" <Termi> "!=" <Exp> ")")*> => {
        tail.push(head);
        tail
    }
};

pub Exp: Expression = {
    Termi => Leaf(<>),
    "(" <root: Termi> <params: (<Exp>)+ > ")" => Op(root, params),
    "(" <Exp> ")"
};

Id: Identifier = {
    <s: r"#[^#]+#"> => {
        let mut x = s.to_string();
        x.remove(x.len() - 1);
        x.remove(0);
        x
    },
    <s:r"[a-zA-Z+\-/_*&$%^@0-9]+"> => s.to_string(),
};

Termi: Terminal = {
    <id: Id> <anno: (":" <Annot>)?> => Id(id, anno.map(|x| Box::new(x))),
    "?" <id: Id> <anno: (":" <Annot>)?> => Hole(id, anno.map(|x| Box::new(x))),
};

Num: i32 = {
    <x: r"(0 | (-)?[1-9][0-9]*)"> => {
        let s: String = x.split_whitespace().collect();
        i32::from_str(&*s).unwrap()
    },
};